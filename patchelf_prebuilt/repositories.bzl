"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("//patchelf_prebuilt:version.bzl", "VERSION")
load("//patchelf_prebuilt/platforms:platforms.bzl", "PLATFORMS")
load("//patchelf_prebuilt/private:integrity.bzl", "RELEASED_BINARY_INTEGRITY")
load("//patchelf_prebuilt/private:toolchains_repo.bzl", "toolchains_repo")

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for patchelf_prebuilt toolchain"
_ATTRS = {
    "patchelf_prebuilt_version": attr.string(mandatory = True, default = VERSION),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _patchelf_prebuilt_repo_impl(repository_ctx):
    extension = ".exe" if "windows" in repository_ctx.attr.platform else ""
    filename = "patchelf-v{version}-{platform}{extension}".format(
        version = repository_ctx.attr.patchelf_prebuilt_version.split("-", 1)[0],
        platform = repository_ctx.attr.platform,
        extension = extension,
    )
    url = "https://github.com/bookingcom/rules_patchelf_prebuilt/releases/download/v{version}/{filename}".format(
        version = repository_ctx.attr.patchelf_prebuilt_version,
        platform = repository_ctx.attr.platform,
        extension = extension,
        filename = filename,
    )

    repository_ctx.download(
        url = url,
        output = "patchelf{}".format(extension),
        sha256 = RELEASED_BINARY_INTEGRITY[filename],
        executable = True,
    )
    build_content = """# Generated by patchelf_prebuilt/repositories.bzl
load("@com_booking_rules_patchelf_prebuilt//patchelf_prebuilt:toolchain.bzl", "patchelf_prebuilt_toolchain")

patchelf_prebuilt_toolchain(
    name = "patchelf_prebuilt_toolchain",
    target_tool = ":patchelf{extension}",
)
""".format(extension = extension)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

patchelf_prebuilt_repositories = repository_rule(
    _patchelf_prebuilt_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def patchelf_prebuilt_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "patchelf_prebuilt_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "patchelf_prebuilt_host"
    - create a repository exposing toolchains for each platform like "patchelf_prebuilt_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "patchelf_prebuilt1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each node_repositories call
    """
    for platform in PLATFORMS.keys():
        patchelf_prebuilt_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
